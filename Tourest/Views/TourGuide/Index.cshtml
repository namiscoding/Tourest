@model IEnumerable<Tourest.TourGuide.ViewModels.TourGuideAssignmentViewModel>
@{
    ViewData["Title"] = "Tour Assignments";
}

<div class="container-fluid px-0">
    <!-- Header -->
    <header class="bg-primary text-white py-4 mb-4 shadow">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0"><i class="fas fa-tasks me-2"></i>Tour Assignments</h1>
                    <p class="mb-0">Manage your assigned tour groups</p>
                </div>
                <div class="d-flex align-items-center">
                    <img src="https://via.placeholder.com/40" alt="Tour Guide Profile" class="rounded-circle me-2" width="40" height="40">
                    <span>Tour Guide</span>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container">
        <!-- Filter and Status -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="h4 mb-0"><i class="fas fa-list-check me-2"></i>Current Assignments</h2>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-filter me-1"></i> Filter
                </button>
                <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                    <li><a class="dropdown-item filter-option" href="#" data-filter="all">All Assignments</a></li>
                    <li><a class="dropdown-item filter-option" href="#" data-filter="pending">Pending</a></li>
                    <li><a class="dropdown-item filter-option" href="#" data-filter="confirmed">Confirmed</a></li>
                    <li><a class="dropdown-item filter-option" href="#" data-filter="rejected">Rejected</a></li>
                    <li><a class="dropdown-item filter-option" href="#" data-filter="completed">Completed</a></li>
                </ul>
            </div>
        </div>

        <!-- Assignments List -->
        <div class="row">
            <div class="col-12">
                @if (Model != null && Model.Any())
                {
                    @foreach (var tour in Model)
                    {
                        <div class="card assignment-card mb-3 @tour.Status.ToLower()"
                             id="assignment-@tour.AssignmentId"
                             data-assignment-id="@tour.AssignmentId"
                             data-status="@tour.Status.ToLower()"
                             aria-label="Tour Assignment @tour.TourName">
                            <div class="card-body">
                                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start">
                                    <div class="flex-grow-1 me-md-3">
                                        <div class="d-flex align-items-center mb-2">
                                            <h5 class="card-title mb-0 me-2">
                                                <i class="fas fa-map-marked-alt text-primary me-2"></i>
                                                @tour.TourName
                                            </h5>
                                            <span class="badge badge-@tour.Status.ToLower() status-badge">
                                                @Html.Raw(GetStatusIcon(tour.Status)) @tour.Status
                                            </span>
                                        </div>

                                        <div class="card-text mb-3">
                                            <small class="text-muted">
                                                <i class="far fa-clock me-1"></i>
                                                Assigned on @tour.AssignmentDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                            </small>
                                        </div>

                                        <div class="assignment-details">
                                            <div class="detail-item">
                                                <span class="detail-label"><i class="fas fa-calendar-day me-1"></i> Departure</span>
                                                <span class="detail-value">@tour.DepartureDate.ToString("MMM dd, yyyy")</span>
                                            </div>
                                            <div class="detail-item">
                                                <span class="detail-label"><i class="fas fa-users me-1"></i> Group Size</span>
                                                <span class="detail-value">@tour.TotalAdults Adults, @tour.TotalChildren Children</span>
                                            </div>
                                            <div class="detail-item">
                                                <span class="detail-label"><i class="fas fa-map-marker-alt me-1"></i> Pickup</span>
                                                <span class="detail-value">@tour.PickupPoint</span>
                                            </div>
                                            <div class="detail-item">
                                                <span class="detail-label"><i class="fas fa-star me-1"></i> Rating</span>
                                                <span class="detail-value">@Html.Raw(GetRatingStars(tour.TourRating))</span>
                                            </div>
                                        </div>

                                        @if (tour.Status.ToLower() == "pending" && DateTime.Now < tour.Deadline)
                                        {
                                            <div class="mt-2">
                                                <small class="text-muted">
                                                    <i class="fas fa-hourglass-half me-1"></i>
                                                    Response deadline: <span class="countdown-timer" id="countdown-@tour.AssignmentId" data-deadline="@tour.Deadline.ToString("o")"></span>
                                                </small>
                                            </div>
                                        }
                                    </div>

                                    <div class="action-buttons mt-3 mt-md-0">
                                        <div class="d-flex flex-column gap-2">
                                           

                                            @if (tour.Status.ToLower() == "pending" && DateTime.Now < tour.Deadline)
                                            {
                                                <button class="btn btn-sm btn-success accept-btn"
                                                        data-assignment-id="@tour.AssignmentId"
                                                        aria-label="Accept assignment for @tour.TourName">
                                                    <i class="fas fa-check me-1"></i> Accept
                                                </button>
                                                <button class="btn btn-sm btn-danger reject-btn"
                                                        data-assignment-id="@tour.AssignmentId"
                                                        aria-label="Reject assignment for @tour.TourName">
                                                    <i class="fas fa-times me-1"></i> Reject
                                                </button>
                                            }
                                            else if (tour.Status.ToLower() == "confirmed")
                                            {
                                                <button class="btn btn-sm btn-info complete-btn"
                                                        data-assignment-id="@tour.AssignmentId"
                                                        aria-label="Mark @tour.TourName as completed">
                                                    <i class="fas fa-flag-checkered me-1"></i> Complete
                                                </button>
                                            }
                                        </div>

                                        @if (tour.Status.ToLower() == "pending" && DateTime.Now < tour.Deadline)
                                        {
                                            <div class="reject-reason-container mt-2" id="reject-reason-@tour.AssignmentId" aria-hidden="true">
                                                <div class="alert alert-danger alert-dismissible fade show d-none" role="alert" id="reject-error-@tour.AssignmentId">
                                                    Please provide a reason for rejection
                                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                                </div>
                                                <textarea class="form-control form-control-sm mb-2"
                                                          placeholder="Reason for rejection..."
                                                          rows="2"
                                                          aria-label="Reason for rejecting @tour.TourName"></textarea>
                                                <div class="d-flex justify-content-end gap-2">
                                                    <button class="btn btn-sm btn-outline-secondary cancel-reject-btn"
                                                            aria-label="Cancel rejection for @tour.TourName">
                                                        Cancel
                                                    </button>
                                                    <button class="btn btn-sm btn-danger confirm-reject-btn"
                                                            data-assignment-id="@tour.AssignmentId"
                                                            aria-label="Submit rejection for @tour.TourName">
                                                        Submit
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5 bg-light rounded no-assignments">
                        <i class="fas fa-calendar-check fa-3x text-muted mb-3"></i>
                        <h3 class="h4 text-muted">No Tour Assignments</h3>
                        <p class="text-muted">You don't have any assigned tours at the moment.</p>
                        <button class="btn btn-primary" id="refresh-btn" aria-label="Refresh assignments">
                            <i class="fas fa-sync-alt me-2"></i> Refresh
                        </button>
                    </div>
                }
            </div>
        </div>
    </main>
</div>

<!-- Assignment Details Modal -->
<div class="modal fade" id="assignmentDetailsModal" tabindex="-1" aria-labelledby="assignmentDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="assignmentDetailsModalLabel">
                    <i class="fas fa-info-circle me-2"></i> Assignment Details
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="assignmentDetailsContent">
                <!-- Content loaded via AJAX -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i> Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="confirmationModalBody">
                Are you sure you want to perform this action?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>
</div>

<style>
    .reject-reason-container {
        display: none;
    }

    .badge-pending {
        background-color: #ffc107;
    }

    .badge-confirmed {
        background-color: #28a745;
    }

    .badge-rejected {
        background-color: #dc3545;
    }

    .badge-completed {
        background-color: #17a2b8;
    }

    .assignment-details .detail-item {
        display: flex;
        gap: 10px;
        margin-bottom: 8px;
    }

    .assignment-details .detail-label {
        font-weight: 500;
        min-width: 100px;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            let currentAction = null;
            let currentAssignmentId = null;

            // Initialize countdown timers
            initializeCountdownTimers();

            // Filter assignments
            $('.filter-option').on('click', function (e) {
                e.preventDefault();
                filterAssignments($(this).data('filter'));
            });

            // Details button
            $(document).on('click', '.details-btn', function () {
                const assignmentId = $(this).data('assignment-id');
                showAssignmentDetails(assignmentId);
            });

            // Accept button
            $(document).on('click', '.accept-btn', function () {
                currentAssignmentId = $(this).data('assignment-id');
                showConfirmation('Are you sure you want to accept this assignment?', 'accept');
            });

            // Reject button
            $(document).on('click', '.reject-btn', function () {
                const assignmentId = $(this).data('assignment-id');
                $(this).hide().siblings('.accept-btn').hide();
                $(`#reject-reason-${assignmentId}`).slideDown().attr('aria-hidden', 'false');
            });

            // Cancel reject
            $(document).on('click', '.cancel-reject-btn', function () {
                const container = $(this).closest('.reject-reason-container');
                container.slideUp().attr('aria-hidden', 'true').find('textarea').val('');
                container.siblings('.reject-btn, .accept-btn').show();
                $(`#reject-error-${container.attr('id').split('-').pop()}`).addClass('d-none');
            });

            // Confirm reject
            $(document).on('click', '.confirm-reject-btn', function () {
                const assignmentId = $(this).data('assignment-id');
                const reason = $(`#reject-reason-${assignmentId} textarea`).val().trim();

                if (!reason) {
                    $(`#reject-error-${assignmentId}`).removeClass('d-none');
                    return;
                }

                currentAssignmentId = assignmentId;
                showConfirmation('Are you sure you want to reject this assignment?', 'reject', reason);
            });

            // Complete button
            $(document).on('click', '.complete-btn', function () {
                currentAssignmentId = $(this).data('assignment-id');
                showConfirmation('Mark this assignment as completed?', 'complete');
            });

            // Refresh button
            $('#refresh-btn').on('click', () => location.reload());

            // Confirm action
            $('#confirmAction').on('click', () => performAction(currentAction, currentAssignmentId));

            function initializeCountdownTimers() {
                $('.assignment-card.pending').each(function () {
                    const assignmentId = $(this).data('assignment-id');
                    const deadline = new Date($(`#countdown-${assignmentId}`).data('deadline'));

                    if (isNaN(deadline.getTime())) {
                        $(`#countdown-${assignmentId}`).text('Invalid deadline');
                        return;
                    }

                    updateCountdown(assignmentId, deadline);
                    setInterval(() => updateCountdown(assignmentId, deadline), 1000);
                });
            }

            function updateCountdown(assignmentId, deadline) {
                const now = new Date();
                const diff = deadline - now;

                if (diff <= 0) {
                    $(`#countdown-${assignmentId}`).text('Deadline passed');
                    $(`#assignment-${assignmentId} .accept-btn, #assignment-${assignmentId} .reject-btn`)
                        .prop('disabled', true).addClass('disabled');
                    return;
                }

                const hours = Math.floor(diff / (1000 * 60 * 60));
                const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((diff % (1000 * 60)) / 1000);
                $(`#countdown-${assignmentId}`).text(`${hours}h ${minutes}m ${seconds}s`);
            }

            function filterAssignments(filter) {
                $('.assignment-card').toggle(filter === 'all' || $(this).data('status') === filter);
            }

            function showAssignmentDetails(assignmentId) {
                $.ajax({
                    url: '/TourGuide/GetAssignmentDetails',
                    type: 'GET',
                    data: { assignmentId: assignmentId },
                    success: function (data) {
                        $('#assignmentDetailsContent').html(data);
                        $('#assignmentDetailsModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to load assignment details:', {
                            status: status,
                            error: error,
                            responseText: xhr.responseText,
                            statusCode: xhr.status
                        });
                        alert('Failed to load assignment details. Check the console for more information.');
                    }
                });
            }

            function showConfirmation(message, action, additionalData = null) {
                currentAction = { type: action, data: additionalData };
                $('#confirmationModalBody').text(message);
                $('#confirmationModal').modal('show');
            }

            function performAction(action, assignmentId) {
                $('#confirmationModal').modal('hide');

                const data = { AssignmentId: assignmentId };
                let url = '';

                switch (action.type) {
                    case 'accept':
                        url = '/TourGuide/AcceptAssignment';
                        break;
                    case 'reject':
                        url = '/TourGuide/RejectAssignment';
                        data.Reason = action.data;
                        break;
                    case 'complete':
                        url = '/TourGuide/CompleteAssignment';
                        break;
                    default:
                        return;
                }

                $.ajax({
                    url,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    beforeSend: () => $(`button[data-assignment-id="${assignmentId}"]`).prop('disabled', true),
                    success: (response) => {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert(response.message || 'Action failed.');
                        }
                    },
                    error: () => alert('An error occurred while processing the request.'),
                    complete: () => $(`button[data-assignment-id="${assignmentId}"]`).prop('disabled', false)
                });
            }
        });
    </script>
}

@functions {
    string GetStatusIcon(string status) =>
        status.ToLower() switch
        {
            "confirmed" => "<i class='fas fa-check-circle me-1'></i>",
            "pending" => "<i class='fas fa-clock me-1'></i>",
            "rejected" => "<i class='fas fa-times-circle me-1'></i>",
            "completed" => "<i class='fas fa-flag-checkered me-1'></i>",
            _ => "<i class='fas fa-question-circle me-1'></i>"
        };

    string GetRatingStars(List<Tourest.Data.Entities.Rating> ratings)
    {
        if (ratings == null || !ratings.Any()) return "Not rated";

        int averageRating = (int)Math.Round(ratings.Average(r => r.RatingValue));
        var stars = "";
        for (int i = 0; i < 5; i++)
        {
            stars += i < averageRating
                ? "<i class='fas fa-star text-warning'></i>"
                : "<i class='far fa-star text-warning'></i>";
        }
        return stars;
    }
}