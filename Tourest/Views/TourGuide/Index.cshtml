@model IEnumerable<Tourest.TourGuide.ViewModels.TourGuideAssignmentViewModel>
@{
    ViewData["Title"] = "Tour Assignments";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en" class="light">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="description" content="Tour Guide Dashboard - Manage your schedule and assignments with Touest." />
    <meta name="keywords" content="Tour Guide, Dashboard, Schedule, Assignments, Tour Management" />
    <meta name="author" content="wprealizer" />
    <title>Tour Guide Dashboard - Touest</title>

    <!-- Favicon -->
    <link rel="icon" href="assets/images/favicon.png" type="image/x-icon" />

    <!-- CSS Files -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

    <!-- Custom CSS -->
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
        }

        .dashboard-header {
            background: linear-gradient(135deg, #28a745 0%, #218838 100%);
            color: white;
            padding: 2rem 0;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .sidebar {
            background-color: #ffffff;
            border-right: 1px solid #e9ecef;
            height: 100vh;
            padding-top: 20px;
            position: fixed;
            width: 250px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        }

            .sidebar a {
                color: #2c3e50;
                padding: 10px 20px;
                display: block;
                font-size: 1rem;
                transition: all 0.3s ease;
            }

                .sidebar a:hover, .sidebar a.active {
                    background-color: #28a745;
                    color: white;
                    border-radius: 0 25px 25px 0;
                }

        .main-content {
            margin-left: 250px;
            padding: 20px;
        }

        .schedule-section, .assignment-section {
            padding: 2rem 0;
        }

        .calendar-container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            padding: 1rem;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

            .calendar-header h2 {
                margin: 0;
                font-size: 1.5rem;
                color: #2c3e50;
            }

            .calendar-header .nav-btn {
                background: none;
                border: none;
                font-size: 1.2rem;
                cursor: pointer;
                color: #28a745;
            }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: #e9ecef;
            border: 1px solid #e9ecef;
        }

            .calendar-grid div {
                background-color: white;
                padding: 0.5rem;
                text-align: center;
                border: 1px solid #e9ecef;
                min-height: 80px;
                position: relative;
            }

            .calendar-grid .day-header {
                background-color: #f8f9fa;
                font-weight: 600;
                color: #6c757d;
                padding: 0.5rem;
            }

            .calendar-grid .day {
                color: #2c3e50;
                font-size: 1rem;
            }

                .calendar-grid .day.empty {
                    background-color: #f1f3f5;
                }

                .calendar-grid .day.today {
                    background-color: #e6f4ea;
                    border: 1px solid #28a745;
                }

        .tour-event {
            background-color: #28a745;
            color: white;
            font-size: 0.7rem;
            padding: 0.2rem;
            border-radius: 4px;
            margin-top: 0.3rem;
            cursor: pointer;
            display: block;
            text-align: left;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

            .tour-event.pending {
                background-color: #ffc107;
                color: #212529;
            }

            .tour-event.expired {
                background-color: #ff6f61;
                color: #fff;
            }

            .tour-event.confirmed {
                background-color: #28a745;
                color: white;
            }

            .tour-event.rejected {
                background-color: #dc3545;
                color: white;
            }

            .tour-event.completed {
                background-color: #17a2b8;
                color: white;
            }

        .filter-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-content {
            border-radius: 8px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            background: #28a745;
            color: white;
            border-radius: 8px 8px 0 0;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 5px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-primary {
            background-color: #28a745;
            color: #fff;
        }

            .btn-primary:hover {
                background-color: #218838;
            }

        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .badge-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .badge-expired {
            background-color: #ff6f61;
            color: #fff;
        }

        .badge-confirmed {
            background-color: #d4edda;
            color: #155724;
        }

        .badge-rejected {
            background-color: #f8d7da;
            color: #721c24;
        }

        .badge-completed {
            background-color: #17a2b8;
            color: white;
        }

        .no-tours {
            text-align: center;
            padding: 2rem;
            color: #6c757d;
        }

        .calendar-grid div {
            padding: 0.3rem;
            min-height: 60px;
        }

        .tour-event {
            font-size: 0.6rem;
            padding: 0.1rem;
        }

        .assignment-table {
            background: white;
            border-radius: 8px;
            padding: 1rem;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        }

        .table th, .table td {
            vertical-align: middle;
        }

        .table .btn {
            font-size: 0.8rem;
            padding: 0.3rem 0.6rem;
        }

        .reject-reason-container {
            display: none;
        }

        #confirmationModal .modal-dialog {
            margin-top: 200px !important;
        }

        #assignmentDetailsModal .modal-dialog {
            margin-top: 200px;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="p-3">
            <h4 class="text-center"><i class="fas fa-map-marked-alt me-2"></i>Touest</h4>
            <hr>
            <a href="/TourGuide/Index"><i class="fas fa-tachometer-alt me-2"></i>Overview</a>
            <a href="#schedule" class="active"><i class="fas fa-calendar-alt me-2"></i>View Schedule</a>
            <a href="#assignments"><i class="fas fa-tasks me-2"></i>View Assignments</a>
            <a href="#profile"><i class="fas fa-user me-2"></i>Profile</a>
            <a href="#logout"><i class="fas fa-sign-out-alt me-2"></i>Logout</a>
        </div>
    </div>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <div class="container">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="mb-2"><i class="fas fa-tachometer-alt me-2"></i>Tour Guide Dashboard</h1>
                        <p class="mb-0">Manage your tours and assignments efficiently</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Schedule Section -->
        <section class="schedule-section section-padding-top-bottom" id="schedule">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="filter-bar">
                            <h2 class="mb-0"><i class="fas fa-calendar-check me-2"></i>Your Schedule</h2>
                            <div class="d-flex gap-2">
                                <select id="status-filter" class="form-select">
                                    <option value="all">All Status</option>
                                    <option value="pending">Pending</option>
                                    <option value="expired">Expired</option>
                                    <option value="confirmed">Confirmed</option>
                                    <option value="rejected">Rejected</option>
                                    <option value="completed">Completed</option>
                                </select>
                                <button class="btn btn-primary" id="view-list-btn"><i class="fas fa-list"></i> List View</button>
                            </div>
                        </div>

                        @if (Model == null || !Model.Any())
                        {
                            <div class="no-tours">
                                <i class="fas fa-calendar-times fa-3x mb-3"></i>
                                <h4>No tours assigned</h4>
                                <p>You don't have any tours assigned to you at this time.</p>
                            </div>
                        }
                        else
                        {
                            <div class="calendar-container">
                                <div class="calendar-header">
                                    <button class="nav-btn" id="prev-month"><i class="fas fa-chevron-left"></i></button>
                                    <h2 id="calendar-title"></h2>
                                    <button class="nav-btn" id="next-month"><i class="fas fa-chevron-right"></i></button>
                                </div>
                                <div class="calendar-grid" id="calendar-grid">
                                    <!-- Calendar will be generated here -->
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </section>

        <!-- Assignments Section -->
        <section class="assignment-section section-padding-top-bottom" id="assignments">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <div class="filter-bar">
                            <h2 class="mb-0"><i class="fas fa-tasks me-2"></i>Your Assignments</h2>
                            <div class="d-flex gap-2">
                                <select id="assignment-status-filter" class="form-select">
                                    <option value="all">All Status</option>
                                    <option value="pending">Pending</option>
                                    <option value="expired">Expired</option>
                                    <option value="confirmed">Confirmed</option>
                                    <option value="rejected">Rejected</option>
                                    <option value="completed">Completed</option>
                                </select>
                            </div>
                        </div>

                        @if (Model == null || !Model.Any())
                        {
                            <div class="no-tours">
                                <i class="fas fa-tasks fa-3x mb-3"></i>
                                <h4>No assignments available</h4>
                                <p>You don't have any assignments at this time.</p>
                                <button class="btn btn-primary" id="refresh-btn">Refresh</button>
                            </div>
                        }
                        else
                        {
                            <div class="assignment-table">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Tour Name</th>
                                            <th>Departure Date</th>
                                            <th>Status</th>
                                            <th>Adults</th>
                                            <th>Children</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="assignment-table-body">
                                        <!-- Assignments will be generated here -->
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Assignment Details Modal -->
    <div class="modal fade" id="assignmentDetailsModal" tabindex="-1" aria-labelledby="assignmentDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignmentDetailsModalLabel">Tour Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <h5 id="modal-tour-name"></h5>
                    <p><strong>Status:</strong> <span id="modal-tour-status" class="status-badge"></span></p>
                    <p><strong>Departure Date:</strong> <span id="modal-departure-date"></span></p>
                    <p><strong>Pickup Point:</strong> <span id="modal-pickup-point"></span></p>
                    <p><strong>Total Adults:</strong> <span id="modal-total-adults"></span></p>
                    <p><strong>Total Children:</strong> <span id="modal-total-children"></span></p>
                    <p><strong>Assigned On:</strong> <span id="modal-assignment-date"></span></p>
                    <p><strong>Deadline:</strong> <span id="modal-deadline"></span></p>
                    <div id="modal-ratings-container" class="mt-4">
                        <h6>Ratings & Feedback</h6>
                        <div id="modal-ratings-content"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">View Group</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="confirmationModalBody">
                    Are you sure you want to perform this action?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmAction">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JS Files -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

    <!-- Custom JavaScript -->
    <script>
        $(document).ready(function () {
            let currentAction = null;
            let currentAssignmentId = null;

            // Initialize variables
            const calendarGrid = document.getElementById('calendar-grid');
            const calendarTitle = document.getElementById('calendar-title');
            const prevMonthBtn = document.getElementById('prev-month');
            const nextMonthBtn = document.getElementById('next-month');
            const statusFilter = document.getElementById('status-filter');
            const assignmentTableBody = document.getElementById('assignment-table-body');
            const assignmentStatusFilter = document.getElementById('assignment-status-filter');

            let currentDate = new Date();
            let currentMonth = currentDate.getMonth();
            let currentYear = currentDate.getFullYear();

            // Process tour data from model
            let tours = [
                @foreach (var tour in Model)
                {
                        <text>
                        {
                            id: '@tour.AssignmentId',
                            title: '@Html.Raw(tour.TourName.Replace("'", "\\'"))',
                            start: '@tour.DepartureDate.ToString("yyyy-MM-dd")',
                            status: '@tour.Status.ToLower()',
                            pickupPoint: '@Html.Raw(tour.PickupPoint.Replace("'", "\\'"))',
                            totalAdults: @tour.TotalAdults,
                            totalChildren: @tour.TotalChildren,
                            assignmentDate: '@tour.AssignmentDate.ToString("MMM dd, yyyy hh:mm tt")',
                            deadline: new Date('@tour.Deadline.ToString("yyyy-MM-ddTHH:mm:ss")'),
                            ratings: [
                                @if (tour.TourRating != null)
                                {
                                        foreach (var rating in tour.TourRating)
                                        {
                                                <text>
                                                {
                                                    value: @rating.RatingValue,
                                                    date: '@rating.RatingDate.ToString("MMM dd, yyyy")'
                                                },
                                                </text>
                                        }
                                }
                            ]
                        },
                        </text>
                }
            ];

            // Format deadline date and initialize countdown timers
            tours.forEach(tour => {
                tour.deadlineFormatted = tour.deadline.toLocaleString('en-US', {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                // Initialize countdown timers for pending assignments
                if (tour.status === 'pending') {
                    const assignmentId = tour.id;
                    const deadline = new Date(tour.deadline);

                    if (isNaN(deadline.getTime())) {
                        $(`#countdown-${assignmentId}`).text('Invalid deadline');
                    } else {
                        updateCountdown(assignmentId, deadline);
                        setInterval(() => updateCountdown(assignmentId, deadline), 1000);
                    }
                }
            });

            // Update countdown timer
            function updateCountdown(assignmentId, deadline) {
                const now = new Date();
                const diff = deadline - now;

                if (diff <= 0) {
                    $(`#countdown-${assignmentId}`).text('Deadline passed');
                    $(`#assignment-${assignmentId} .accept-btn, #assignment-${assignmentId} .reject-btn`)
                        .prop('disabled', true).addClass('disabled');
                    return;
                }

                const hours = Math.floor(diff / (1000 * 60 * 60));
                const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((diff % (1000 * 60)) / 1000);
                $(`#countdown-${assignmentId}`).text(`${hours}h ${minutes}m ${seconds}s`);
            }

            // Render calendar function
            function renderCalendar(month, year) {
                if (!calendarGrid) return;

                calendarGrid.innerHTML = '';
                const monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'
                ];
                const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

                // Display month and year
                calendarTitle.textContent = `${monthNames[month]} ${year}`;

                // Add days of the week headers
                daysOfWeek.forEach(day => {
                    const dayHeader = document.createElement('div');
                    dayHeader.className = 'day-header';
                    dayHeader.textContent = day;
                    calendarGrid.appendChild(dayHeader);
                });

                // Get the first day of the month
                const firstDay = new Date(year, month, 1).getDay();
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                const today = new Date();
                const todayDate = today.getDate();
                const todayMonth = today.getMonth();
                const todayYear = today.getFullYear();

                // Add empty days before the first day of the month
                for (let i = 0; i < firstDay; i++) {
                    const emptyDay = document.createElement('div');
                    emptyDay.className = 'day empty';
                    calendarGrid.appendChild(emptyDay);
                }

                // Add days of the month
                for (let day = 1; day <= daysInMonth; day++) {
                    const dayDiv = document.createElement('div');
                    dayDiv.className = 'day';
                    if (day === todayDate && month === todayMonth && year === todayYear) {
                        dayDiv.classList.add('today');
                    }
                    dayDiv.textContent = day;

                    // Add tours for this day
                    const currentDay = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                    const toursOnDay = tours.filter(tour => {
                        const tourDate = new Date(tour.start);
                        const tourDay = tourDate.getDate();
                        const tourMonth = tourDate.getMonth();
                        const tourYear = tourDate.getFullYear();

                        return day === tourDay &&
                               month === tourMonth &&
                               year === tourYear &&
                               (statusFilter.value === 'all' || tour.status === statusFilter.value);
                    });

                    toursOnDay.forEach(tour => {
                        const tourEvent = document.createElement('span');
                        tourEvent.className = `tour-event ${tour.status}`;
                        tourEvent.textContent = tour.title;
                        tourEvent.title = tour.title; // Add tooltip
                        tourEvent.addEventListener('click', function() {
                            showTourDetails(tour);
                        });
                        dayDiv.appendChild(tourEvent);
                    });

                    calendarGrid.appendChild(dayDiv);
                }
            }

            // Render assignments table
            function renderAssignments() {
                if (!assignmentTableBody) return;

                assignmentTableBody.innerHTML = '';

                const filteredTours = tours.filter(tour =>
                    assignmentStatusFilter.value === 'all' || tour.status === assignmentStatusFilter.value
                );

                filteredTours.forEach(tour => {
                    const row = document.createElement('tr');
                    const now = new Date();
                    const deadline = new Date(tour.deadline);
                    const isPendingAndNotExpired = tour.status === 'pending' && now < deadline;
                    const isConfirmedOrExpired = tour.status === 'confirmed' || tour.status === 'expired';

                    row.innerHTML = `
                        <td>${tour.title}</td>
                        <td>${new Date(tour.start).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</td>
                        <td><span class="status-badge badge-${tour.status}">${tour.status.charAt(0).toUpperCase() + tour.status.slice(1)}</span></td>
                        <td>${tour.totalAdults}</td>
                        <td>${tour.totalChildren}</td>
                        <td>
                            <button class="btn btn-primary btn-sm details-btn" data-assignment-id="${tour.id}">View Details</button>
                            ${isPendingAndNotExpired ? `
                                <button class="btn btn-sm btn-success accept-btn" data-assignment-id="${tour.id}">Accept</button>
                                <button class="btn btn-sm btn-danger reject-btn" data-assignment-id="${tour.id}">Reject</button>
                                <div class="reject-reason-container mt-2" id="reject-reason-${tour.id}" aria-hidden="true">
                                    <div class="alert alert-danger alert-dismissible fade show d-none" role="alert" id="reject-error-${tour.id}">
                                        Please provide a reason for rejection
                                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                    </div>
                                    <textarea class="form-control form-control-sm mb-2" placeholder="Reason for rejection..." rows="2"></textarea>
                                    <div class="d-flex justify-content-end gap-2">
                                        <button class="btn btn-sm btn-outline-secondary cancel-reject-btn">Cancel</button>
                                        <button class="btn btn-sm btn-danger confirm-reject-btn" data-assignment-id="${tour.id}">Submit</button>
                                    </div>
                                </div>
                                <small class="text-muted d-block mt-2">
                                    <i class="fas fa-hourglass-half me-1"></i>
                                    Deadline: <span class="countdown-timer" id="countdown-${tour.id}"></span>
                                </small>
                            ` : ''}
                            ${isConfirmedOrExpired ? `
                                <button class="btn btn-sm btn-info complete-btn" data-assignment-id="${tour.id}">Complete</button>
                            ` : ''}
                        </td>
                    `;
                    assignmentTableBody.appendChild(row);
                });

                // Re-attach event listeners for dynamically added buttons
                attachEventListeners();
            }

            // Show tour details in modal
            function showTourDetails(tour) {
                $('#modal-tour-name').text(tour.title);

                // Set status with appropriate badge class
                const statusBadge = $('#modal-tour-status');
                statusBadge.text(tour.status.charAt(0).toUpperCase() + tour.status.slice(1));
                statusBadge.removeClass('badge-pending badge-expired badge-confirmed badge-rejected badge-completed');
                statusBadge.addClass('badge-' + tour.status);

                $('#modal-departure-date').text(new Date(tour.start).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }));
                $('#modal-pickup-point').text(tour.pickupPoint);
                $('#modal-total-adults').text(tour.totalAdults);
                $('#modal-total-children').text(tour.totalChildren);
                $('#modal-assignment-date').text(tour.assignmentDate);
                $('#modal-deadline').text(tour.deadlineFormatted);

                // Display ratings
                const ratingsContainer = $('#modal-ratings-content');
                ratingsContainer.empty();

                if (tour.ratings && tour.ratings.length > 0) {
                    const averageRating = tour.ratings.reduce((sum, rating) => sum + rating.value, 0) / tour.ratings.length;
                    ratingsContainer.append(`
                        <div class="mb-3">
                            <h6>Average Rating: ${averageRating.toFixed(1)}/5</h6>
                            <div class="stars">
                                ${'<i class="fas fa-star text-warning"></i>'.repeat(Math.floor(averageRating))}
                                ${(averageRating % 1 >= 0.5) ? '<i class="fas fa-star-half-alt text-warning"></i>' : ''}
                                ${'<i class="far fa-star text-secondary"></i>'.repeat(5 - Math.ceil(averageRating))}
                            </div>
                        </div>
                    `);

                    tour.ratings.forEach(rating => {
                        ratingsContainer.append(`
                            <div class="card mb-2">
                                <div class="card-body">
                                    <div class="stars mb-2">
                                        ${'<i class="fas fa-star text-warning"></i>'.repeat(rating.value)}
                                        ${'<i class="far fa-star text-secondary"></i>'.repeat(5 - rating.value)}
                                    </div>
                                    ${rating.comment ? `<p class="mb-1">${rating.comment}</p>` : '<p class="mb-1 text-muted">No comment provided</p>'}
                                    <small class="text-muted">${rating.date}</small>
                                </div>
                            </div>
                        `);
                    });
                } else {
                    ratingsContainer.append('<div class="alert alert-info">No ratings available for this tour</div>');
                }

                $('#assignmentDetailsModal').modal('show');
            }

            // Attach event listeners for buttons
            function attachEventListeners() {
                // Details button
                $('.details-btn').off('click').on('click', function () {
                    const assignmentId = $(this).data('assignment-id');
                    const tour = tours.find(t => t.id === assignmentId);
                    if (tour) {
                        showTourDetails(tour);
                    } else {
                        showAssignmentDetails(assignmentId);
                    }
                });

                // Accept button
                $('.accept-btn').off('click').on('click', function () {
                    currentAssignmentId = $(this).data('assignment-id');
                    showConfirmation('Are you sure you want to accept this assignment?', 'accept');
                });

                // Reject button
                $('.reject-btn').off('click').on('click', function () {
                    const assignmentId = $(this).data('assignment-id');
                    $(this).hide().siblings('.accept-btn').hide();
                    $(`#reject-reason-${assignmentId}`).slideDown().attr('aria-hidden', 'false');
                });

                // Cancel reject
                $('.cancel-reject-btn').off('click').on('click', function () {
                    const container = $(this).closest('.reject-reason-container');
                    container.slideUp().attr('aria-hidden', 'true').find('textarea').val('');
                    container.siblings('.reject-btn, .accept-btn').show();
                    $(`#reject-error-${container.attr('id').split('-').pop()}`).addClass('d-none');
                });

                // Confirm reject
                $('.confirm-reject-btn').off('click').on('click', function () {
                    const assignmentId = $(this).data('assignment-id');
                    const reason = $(`#reject-reason-${assignmentId} textarea`).val().trim();

                    if (!reason) {
                        $(`#reject-error-${assignmentId}`).removeClass('d-none');
                        return;
                    }

                    currentAssignmentId = assignmentId;
                    showConfirmation('Are you sure you want to reject this assignment?', 'reject', reason);
                });

                // Complete button
                $('.complete-btn').off('click').on('click', function () {
                    currentAssignmentId = $(this).data('assignment-id');
                    showConfirmation('Mark this assignment as completed?', 'complete');
                });
            }

            // Show confirmation modal
            function showConfirmation(message, action, additionalData = null) {
                currentAction = { type: action, data: additionalData };
                $('#confirmationModalBody').text(message);
                $('#confirmationModal').modal('show');
            }

            // Perform action after confirmation
            $('#confirmAction').on('click', () => performAction(currentAction, currentAssignmentId));

            function performAction(action, assignmentId) {
                $('#confirmationModal').modal('hide');

                const data = { AssignmentId: assignmentId };
                let url = '';

                switch (action.type) {
                    case 'accept':
                        url = '/TourGuide/AcceptAssignment';
                        break;
                    case 'reject':
                        url = '/TourGuide/RejectAssignment';
                        data.Reason = action.data;
                        break;
                    case 'complete':
                        url = '/TourGuide/CompleteAssignment';
                        break;
                    default:
                        return;
                }

                $.ajax({
                    url: url,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    beforeSend: () => $(`button[data-assignment-id="${assignmentId}"]`).prop('disabled', true),
                    success: (response) => {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert(response.message || 'Action failed.');
                        }
                    },
                    error: () => alert('An error occurred while processing the request.'),
                    complete: () => $(`button[data-assignment-id="${assignmentId}"]`).prop('disabled', false)
                });
            }
        function showAssignmentDetails(assignmentId) {
            $.ajax({
                url: '/TourGuide/GetAssignmentDetails',
                type: 'GET',
                data: { assignmentId: assignmentId },
                success: function (data) {
                    // Hiển thị dữ liệu vào modal có sẵn
                    $('#modal-tour-name').text(data.tourName);
                    $('#modal-tour-status').text(data.status).removeClass().addClass('status-badge badge-' + data.status.toLowerCase());
                    $('#modal-departure-date').text(new Date(data.departureDate).toLocaleDateString());
                    $('#modal-pickup-point').text(data.pickupPoint);
                    $('#modal-total-adults').text(data.totalAdults);
                    $('#modal-total-children').text(data.totalChildren);
                    $('#modal-assignment-date').text(new Date(data.assignmentDate).toLocaleDateString());
                    $('#modal-deadline').text(new Date(data.deadline).toLocaleDateString());

                    // Xử lý ratings nếu có
                    if (data.tourRating && data.tourRating.length > 0) {
                        const averageRating = data.tourRating.reduce((sum, r) => sum + r.ratingValue, 0) / data.tourRating.length;
                        $('#modal-ratings-content').html(`
                            <div class="mb-3">
                                <h6>Average Rating: ${averageRating.toFixed(1)}/5</h6>
                                <div class="stars">
                                    ${'<i class="fas fa-star text-warning"></i>'.repeat(Math.floor(averageRating))}
                                    ${(averageRating % 1 >= 0.5) ? '<i class="fas fa-star-half-alt text-warning"></i>' : ''}
                                    ${'<i class="far fa-star text-secondary"></i>'.repeat(5 - Math.ceil(averageRating))}
                                </div>
                            </div>
                            ${data.tourRating.map(r => `
                                <div class="card mb-2">
                                    <div class="card-body">
                                        <div class="stars mb-2">
                                            ${'<i class="fas fa-star text-warning"></i>'.repeat(r.ratingValue)}
                                            ${'<i class="far fa-star text-secondary"></i>'.repeat(5 - r.ratingValue)}
                                        </div>
                                        ${r.comment ? `<p class="mb-1">${r.comment}</p>` : '<p class="mb-1 text-muted">No comment provided</p>'}
                                        <small class="text-muted">${new Date(r.ratingDate).toLocaleDateString()}</small>
                                    </div>
                                </div>
                            `).join('')}
                        `);
                    } else {
                        $('#modal-ratings-content').html('<div class="alert alert-info">No ratings available for this tour</div>');
                    }

                    $('#assignmentDetailsModal').modal('show');
                },
                error: function (xhr, status, error) {
                    console.error('Failed to load assignment details:', {
                        status: status,
                        error: error,
                        responseText: xhr.responseText,
                        statusCode: xhr.status
                    });
                    alert('Failed to load assignment details. Check the console for more information.');
                }
            });
        }

            // Initialize calendar and assignments if there are tours
            if (tours.length > 0) {
                renderCalendar(currentMonth, currentYear);
                renderAssignments();

                // Previous month
                $(prevMonthBtn).on('click', function () {
                    currentMonth--;
                    if (currentMonth < 0) {
                        currentMonth = 11;
                        currentYear--;
                    }
                    renderCalendar(currentMonth, currentYear);
                });

                // Next month
                $(nextMonthBtn).on('click', function () {
                    currentMonth++;
                    if (currentMonth > 11) {
                        currentMonth = 0;
                        currentYear++;
                    }
                    renderCalendar(currentMonth, currentYear);
                });

                // Filter by status for calendar
                $(statusFilter).on('change', function () {
                    renderCalendar(currentMonth, currentYear);
                });

                // Filter by status for assignments
                $(assignmentStatusFilter).on('change', function () {
                    renderAssignments();
                });
            }

            // Switch to list view
            $('#view-list-btn').on('click', function () {
                $('html, body').animate({
                    scrollTop: $('#assignments').offset().top
                }, 500);
            });

            // Refresh button
            $('#refresh-btn').on('click', () => location.reload());

            // Sidebar navigation
            $('.sidebar a').on('click', function(e) {
                const href = $(this).attr('href');

                if (href.startsWith('#')) {
                    e.preventDefault();
                    $('.sidebar a').removeClass('active');
                    $(this).addClass('active');

                    const target = href;
                    $('html, body').animate({
                        scrollTop: $(target).offset().top
                    }, 500);
                }
            });
        });
    </script>
</body>
</html>

@functions {
    string GetStatusIcon(string status) =>
        status.ToLower() switch
        {
            "confirmed" => "<i class='fas fa-check-circle me-1'></i>",
            "pending" => "<i class='fas fa-clock me-1'></i>",
            "expired" => "<i class='fas fa-exclamation-triangle me-1'></i>",
            "rejected" => "<i class='fas fa-times-circle me-1'></i>",
            "completed" => "<i class='fas fa-flag-checkered me-1'></i>",
            _ => "<i class='fas fa-question-circle me-1'></i>"
        };

    string GetRatingStars(List<Tourest.Data.Entities.Rating> ratings)
    {
        if (ratings == null || !ratings.Any()) return "Not rated";

        int averageRating = (int)Math.Round(ratings.Average(r => r.RatingValue));
        var stars = "";
        for (int i = 0; i < 5; i++)
        {
            stars += i < averageRating
                ? "<i class='fas fa-star text-warning'></i>"
                : "<i class='far fa-star text-warning'></i>";
        }
        return stars;
    }
}