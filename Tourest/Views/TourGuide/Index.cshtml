@model Tourest.TourGuide.ViewModels.TourGuideAssignmentViewModel
@{
    ViewData["Title"] = "Tour Assignments";
    var assignedTours = ViewData["AssignedTours"] as List<Tourest.TourGuide.ViewModels.TourGuideAssignmentViewModel>;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Tourest</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #28a745;
            --secondary-color: #6c757d;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
        }

        .assignment-card {
            transition: all 0.3s ease;
            border-left: 4px solid var(--primary-color);
            margin-bottom: 1.5rem;
        }

            .assignment-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

            .assignment-card.pending {
                border-left-color: var(--warning-color);
            }

            .assignment-card.confirmed {
                border-left-color: var(--primary-color);
            }

            .assignment-card.rejected {
                border-left-color: var(--danger-color);
            }

        .status-badge {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.35rem 0.65rem;
        }

        .badge-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .badge-confirmed {
            background-color: #d4edda;
            color: #155724;
        }

        .badge-rejected {
            background-color: #f8d7da;
            color: #721c24;
        }

        .action-buttons .btn {
            min-width: 120px;
        }

        .reject-reason-container {
            display: none;
            margin-top: 1rem;
        }

        .countdown-timer {
            font-weight: 600;
            color: var(--danger-color);
        }
    </style>
</head>
<body>
    <div class="container-fluid px-0">
        <!-- Header -->
        <header class="bg-primary text-white py-4 mb-4 shadow">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0"><i class="fas fa-tasks me-2"></i> Tour Assignments</h1>
                        <p class="mb-0">Manage your assigned tour groups</p>
                    </div>
                    <div class="d-flex align-items-center">
                        <img src="https://via.placeholder.com/40" alt="Profile" class="rounded-circle me-2" width="40" height="40">
                        <span>Tour Guide</span>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="container">
            <!-- Filter and Status -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="h4 mb-0"><i class="fas fa-list-check me-2"></i> Current Assignments</h2>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown">
                        <i class="fas fa-filter me-1"></i> Filter
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#">All Assignments</a></li>
                        <li><a class="dropdown-item" href="#">Pending</a></li>
                        <li><a class="dropdown-item" href="#">Confirmed</a></li>
                        <li><a class="dropdown-item" href="#">Rejected</a></li>
                    </ul>
                </div>
            </div>

            <!-- Assignments List -->
            <div class="row">
                <div class="col-12">
                    @if (assignedTours != null && assignedTours.Any())
                    {
                        @foreach (var tour in assignedTours)
                        {
                            <div class="card assignment-card @tour.Status.ToLower() mb-3" id="assignment-@tour.AssignmentId" data-assignment-id="@tour.AssignmentId">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="card-title mb-2">
                                                <i class="fas fa-map-marked-alt text-primary me-2"></i>
                                                @tour.TourName
                                                <span class="status-badge badge-@tour.Status.ToLower() ms-2">
                                                    @if (tour.Status.ToLower() == "confirmed")
                                                    {
                                                        <i class="fas fa-check-circle me-1"></i>
                                                    }
                                                    else if (tour.Status.ToLower() == "pending")
                                                    {
                                                        <i class="fas fa-clock me-1"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-times-circle me-1"></i>
                                                    }
                                                    @tour.Status
                                                </span>
                                            </h5>

                                            <div class="card-text mb-2">
                                                <small class="text-muted">
                                                    <i class="far fa-clock me-1"></i>
                                                    Assigned on @tour.AssignmentDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                </small>
                                            </div>

                                            <div class="d-flex flex-wrap gap-3 mb-2">
                                                <div>
                                                    <i class="fas fa-calendar-day text-info me-1"></i>
                                                    <span>@tour.DepartureDate.ToString("MMM dd, yyyy")</span>
                                                </div>
                                                <div>
                                                    <i class="fas fa-users text-success me-1"></i>
                                                    <span>@tour.TotalAdults Adults, @tour.TotalChildren Children</span>
                                                </div>
                                                <div>
                                                    <i class="fas fa-map-marker-alt text-danger me-1"></i>
                                                    <span>@tour.PickupPoint</span>
                                                </div>
                                            </div>

                                            @if (tour.Status.ToLower() == "pending")
                                            {
                                                <div class="mt-2">
                                                    <small class="text-muted">
                                                        <i class="fas fa-hourglass-half me-1"></i>
                                                        Response deadline:
                                                        <span class="countdown-timer" id="countdown-@tour.AssignmentId"></span>
                                                    </small>
                                                </div>
                                            }
                                        </div>

                                        <div class="action-buttons">
                                            @if (tour.Status.ToLower() == "pending")
                                            {
                                                <div class="d-flex flex-column">
                                                    <div class="d-flex gap-2 mb-2">
                                                        <button class="btn btn-success accept-btn" data-assignment-id="@tour.AssignmentId">
                                                            <i class="fas fa-check me-1"></i> Accept
                                                        </button>
                                                        <button class="btn btn-danger reject-btn" data-assignment-id="@tour.AssignmentId">
                                                            <i class="fas fa-times me-1"></i> Reject
                                                        </button>
                                                    </div>

                                                    <div class="reject-reason-container" id="reject-reason-@tour.AssignmentId">
                                                        <textarea class="form-control mb-2" placeholder="Reason for rejection..." rows="2"></textarea>
                                                        <div class="d-flex justify-content-end gap-2">
                                                            <button class="btn btn-sm btn-outline-secondary cancel-reject-btn">
                                                                Cancel
                                                            </button>
                                                            <button class="btn btn-sm btn-danger confirm-reject-btn" data-assignment-id="@tour.AssignmentId">
                                                                Submit Rejection
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="d-flex gap-2">
                                                    <a href="@Url.Action("AssignmentDetails", "TourGuide", new { id = tour.AssignmentId })" class="btn btn-primary">
                                                        <i class="fas fa-info-circle me-1"></i> Details
                                                    </a>
                                                    <button class="btn btn-secondary">
                                                        <i class="fas fa-users me-1"></i> Group
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5 bg-light rounded">
                            <i class="fas fa-calendar-check fa-3x text-muted mb-3"></i>
                            <h3 class="h4 text-muted">No Tour Assignments</h3>
                            <p class="text-muted">You don't have any assigned tours at the moment.</p>
                            <button class="btn btn-primary">
                                <i class="fas fa-sync-alt me-2"></i> Check for Updates
                            </button>
                        </div>
                    }
                </div>
            </div>
        </main>
    </div>

    <!-- Anti-Forgery Token -->
    @Html.AntiForgeryToken()

    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        $(document).ready(function() {
            // Debug: Log all assignment IDs on page load
            $('.assignment-card').each(function() {
                console.log('Assignment card found with ID:', $(this).data('assignment-id'));
            });

            // Initialize countdown timers for pending assignments
            $('.assignment-card.pending').each(function() {
                const assignmentId = $(this).data('assignment-id');
                const deadline = new Date();
                deadline.setHours(deadline.getHours() + 24); // 24-hour deadline

                function updateCountdown() {
                    const now = new Date();
                    const diff = deadline - now;

                    if (diff <= 0) {
                        $(`#countdown-${assignmentId}`).text("Deadline passed");
                        return;
                    }

                    const hours = Math.floor(diff / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                    $(`#countdown-${assignmentId}`).text(`${hours}h ${minutes}m ${seconds}s`);
                }

                updateCountdown();
                setInterval(updateCountdown, 1000);
            });

            // Handle reject button click
            $(document).on('click', '.reject-btn', function() {
                const assignmentId = $(this).data('assignment-id');
                console.log('Reject button clicked for ID:', assignmentId);
                $(this).hide();
                $(this).siblings('.accept-btn').hide();
                $(`#reject-reason-${assignmentId}`).show();
            });

            // Handle cancel reject button click
            $(document).on('click', '.cancel-reject-btn', function() {
                const container = $(this).closest('.reject-reason-container');
                const assignmentId = container.data('assignment-id');
                console.log('Cancel reject for ID:', assignmentId);
                container.hide();
                container.siblings('.reject-btn').show();
                container.siblings('.accept-btn').show();
                container.find('textarea').val('');
            });

            // Handle accept button click - FIXED VERSION
            $(document).on('click', '.accept-btn', async function() {
                const assignmentId = $(this).data('assignment-id');
                console.log('Accept button clicked for ID:', assignmentId);

                if (!assignmentId || isNaN(assignmentId) || assignmentId <= 0) {
                    console.error('Invalid assignment ID:', assignmentId);
                    alert('Invalid assignment ID');
                    return;
                }

                if (!confirm('Are you sure you want to accept this assignment?')) {
                    return;
                }

                try {
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    console.log('CSRF Token:', token ? 'Exists' : 'Missing');

                    const response = await fetch('@Url.Action("AcceptAssignment", "TourGuide")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            assignmentId: assignmentId
                        })
                    });

                    console.log('Response status:', response.status);

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    console.log('Response data:', data);

                    if (data.success) {
                        // Update UI
                        const card = $(`#assignment-${assignmentId}`);
                        card.removeClass('pending').addClass('confirmed');
                        card.find('.status-badge')
                            .removeClass('badge-pending')
                            .addClass('badge-confirmed')
                            .html('<i class="fas fa-check-circle me-1"></i> Confirmed');

                        // Add confirmation time
                        const now = new Date();
                        const timeString = now.toLocaleString('en-US', {
                            day: '2-digit',
                            month: '2-digit',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });

                        // Update action buttons
                        card.find('.action-buttons').html(`
                            <div class="d-flex gap-2">
                                <a href="/TourGuide/AssignmentDetails/${assignmentId}" class="btn btn-primary">
                                    <i class="fas fa-info-circle me-1"></i> Details
                                </a>
                                <button class="btn btn-secondary">
                                    <i class="fas fa-users me-1"></i> Group
                                </button>
                            </div>
                        `);
                    } else {
                        throw new Error(data.message || 'Failed to accept assignment');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error: ' + error.message);
                }
            });

            // Handle confirm reject button click
            $(document).on('click', '.confirm-reject-btn', async function() {
                const assignmentId = $(this).data('assignment-id');
                console.log('Confirm reject for ID:', assignmentId);
                const reason = $(this).closest('.reject-reason-container').find('textarea').val().trim();

                if (!reason) {
                    alert('Please provide a reason for rejection');
                    return;
                }

                try {
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    const response = await fetch('@Url.Action("RejectAssignment", "TourGuide")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            assignmentId: assignmentId,
                            reason: reason
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Update UI
                        const card = $(`#assignment-${assignmentId}`);
                        card.removeClass('pending').addClass('rejected');
                        card.find('.status-badge')
                            .removeClass('badge-pending')
                            .addClass('badge-rejected')
                            .html('<i class="fas fa-times-circle me-1"></i> Rejected');

                        // Update action buttons
                        card.find('.action-buttons').html(`
                            <div class="d-flex gap-2">
                                <a href="/TourGuide/AssignmentDetails/${assignmentId}" class="btn btn-primary">
                                    <i class="fas fa-info-circle me-1"></i> Details
                                </a>
                                <button class="btn btn-secondary">
                                    <i class="fas fa-users me-1"></i> Group
                                </button>
                            </div>
                        `);
                    } else {
                        throw new Error(data.message || 'Failed to reject assignment');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error: ' + error.message);
                }
            });
        });
    </script>
</body>
</html>