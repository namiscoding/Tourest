@model IEnumerable<Tourest.ViewModels.UnassignedBookingViewModel>
@{
    ViewData["Title"] = "Unassigned Bookings";
    Layout = "/Views/TourManager/_LayoutTourManager.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Tourest</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
    <style>
        :root {
            --primary-color: #28a745;
            --secondary-color: #6c757d;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
        }

        body {
            background-color: #f4f6f9;
        }

        .booking-card {
            transition: all 0.3s ease;
            border-left: 4px solid var(--warning-color);
            margin-bottom: 1.5rem;
        }

            .booking-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        .status-badge {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.35rem 0.65rem;
        }

        .badge-pendingassignment {
            background-color: #fff3cd;
            color: #856404;
        }

        .badge-confirmed {
            background-color: #d4edda;
            color: #155724;
        }

        .badge-cancelled {
            background-color: #f8d7da;
            color: #721c24;
        }

        .badge-rejected {
            background-color: #f8d7da;
            color: #721c24;
        }

        .action-buttons .btn {
            min-width: 120px;
        }

        .countdown-timer {
            font-weight: 600;
            color: var(--danger-color);
        }

        .guide-card {
            cursor: pointer;
            transition: all 0.2s;
        }

            .guide-card:hover {
                background-color: #f8f9fa;
            }

            .guide-card.selected {
                border: 2px solid var(--primary-color);
                background-color: #e8f5e9;
            }

        .guide-rating {
            color: #ffc107;
        }

        .specialization-badge {
            font-size: 0.7rem;
            margin-right: 0.3rem;
        }

        .difficulty-badge {
            font-size: 0.8rem;
            color: white;
        }

        .difficulty-1 {
            background-color: #28a745;
        }

        .difficulty-2 {
            background-color: #5bc0de;
        }

        .difficulty-3 {
            background-color: #ffc107;
            color: #000;
        }

        .difficulty-4 {
            background-color: #fd7e14;
        }

        .difficulty-5 {
            background-color: #dc3545;
        }

        .modal-content {
            border-radius: 0.5rem;
        }

        .modal-header {
            background-color:#039e9d;
            color: #000;
        }

        #bookingDetails p {
            margin-bottom: 0.5rem;
        }

        .badge.bg-info, .badge.bg-primary, .badge.bg-secondary {
            color: white;
        }

        .reject-reason {
            color: #721c24;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container-fluid px-0">

        <!-- Header -->
       


        <!-- Main Content -->
        <main class="container">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="h4 mb-0"><i class="fas fa-list me-2"></i> Unassigned Bookings List</h2>
                <button class="btn" style="background-color: #039e9d; color: white" id="refreshBtn">
                    <i class="fas fa-sync-alt me-1"></i> Refresh
                </button>
            </div>

            <!-- Bookings List -->
            <div class="row">
                <div class="col-12">
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var booking in Model)
                        {
                            <div class="card booking-card mb-3" id="booking-@booking.BookingId"
                                 data-booking-id="@booking.BookingId"
                                 data-tour-group-id="@booking.TourGroupId"
                                 data-tour-id="@booking.TourId"
                                 data-booking-date="@booking.BookingDate.ToString("o")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="card-title mb-2">
                                                <span class="tour-name">
                                                    <i style="color: #039e9d;" class="fas fa-map-marked-alt me-2"></i>
                                                    @booking.TourName
                                                </span>
                                                <span class="status-badge badge-@booking.Status.ToLower() ms-2">
                                                    @switch (booking.Status.ToLower())
                                                    {
                                                        case "confirmed":
                                                            <i class="fas fa-check-circle me-1"></i>
                                                            break;
                                                        case "pendingassignment":
                                                            <i class="fas fa-clock me-1"></i>
                                                            break;
                                                        case "rejected":
                                                            <i class="fas fa-times-circle me-1"></i>
                                                            break;
                                                        default:
                                                            <i class="fas fa-times-circle me-1"></i>
                                                            break;
                                                    }
                                                    @booking.Status
                                                </span>
                                            </h5>
                                            <div class="card-text mb-2">
                                                <small class="text-muted">
                                                    <i class="far fa-calendar me-1"></i>
                                                    Booked on @booking.BookingDate.ToString("MMM dd, yyyy 'at' hh:mm tt")
                                                </small>
                                            </div>
                                            <div class="d-flex flex-wrap gap-3 mb-2">
                                                <div>
                                                    <i class="fas fa-calendar-day text-info me-1"></i>
                                                    <span>Departure: @booking.DepartureDate.ToString("MMM dd, yyyy")</span>
                                                </div>
                                                <div>
                                                    <i class="fas fa-users text-success me-1"></i>
                                                    <span>@booking.NumberOfAdults Adults, @booking.NumberOfChildren Children</span>
                                                </div>
                                                <div>
                                                    <i class="fas fa-map-marker-alt text-danger me-1"></i>
                                                    <span>Pickup: @booking.PickupPoint</span>
                                                </div>
                                                <div>
                                                    <i class="fas fa-money-bill-wave text-primary me-1"></i>
                                                    <span>Total: $@booking.TotalPrice.ToString("#,##0")</span>
                                                </div>
                                            </div>
                                        
                                            @if (booking.Status.ToLower() == "rejected" && !string.IsNullOrEmpty(booking.RejectReason))
                                            {
                                                <div class="mt-2">
                                                    <small class="reject-reason">
                                                        <i class="fas fa-exclamation-circle me-1"></i>
                                                        Rejection Reason: @booking.RejectReason
                                                    </small>
                                                </div>
                                            }
                                        </div>
                                        <div class="action-buttons">
                                            <div class="d-flex flex-column gap-2">
                                                <button style="background-color: #039e9d; color: white" class="btn assign-guide-btn"
                                                        data-booking-id="@booking.BookingId"
                                                        data-tour-group-id="@booking.TourGroupId"
                                                        data-tour-id="@booking.TourId">
                                                    <i class="fas fa-user-plus me-1"></i> Assign Guide
                                                </button>
                                                <a href="@Url.Action("ViewCustomers", "TourManager", new { tourId = booking.TourId })" class="btn btn-outline-secondary">
                                                    <i class="fas fa-users me-1"></i> View Customers
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5 bg-light rounded">
                            <i class="fas fa-calendar-check fa-3x text-muted mb-3"></i>
                            <h3 class="h4 text-muted">No Unassigned Bookings</h3>
                            <p class="text-muted">All bookings have been assigned to tour guides.</p>
                            <button class="btn" style="background-color: #039e9d; color: white" id="checkForNewBtn">
                                <i class="fas fa-sync-alt me-2"></i> Check for New Bookings
                            </button>
                        </div>
                    }
                </div>
            </div>
        </main>
    </div>

    <!-- Assign Guide Modal -->
    <div class="modal fade" id="assignGuideModal" tabindex="-1" aria-labelledby="assignGuideModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignGuideModalLabel"><i class="fas fa-user-plus me-2"></i> Assign Tour Guide</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="bookingId" />
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6>Booking Details</h6>
                            <div id="bookingDetails" class="border p-3 rounded bg-light"></div>
                        </div>
                        <div class="col-md-6">
                            <h6>TOUR DIFFICULTY: <span id="tourDifficultyBadge" class="badge difficulty-badge"></span></h6>
                            <h6>GROUP SIZE: <span id="groupSizeBadge" class="badge bg-info"></span></h6>
                            <h6>REQUIRED EXPERIENCE: <span id="requiredExpBadge" class="badge bg-primary"></span></h6>
                        </div>
                    </div>
                    <h5 class="mb-3">Recommended Guides</h5>
                    <div id="recommendedGuides" class="row mb-4"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn" style="background-color: #039e9d; color: white" id="confirmAssignBtn" disabled>Assign Selected Guide</button>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function () {
            // Initialize countdown timers
            $('.booking-card').each(function () {
                const bookingId = $(this).data('booking-id');
                const bookingDate = new Date($(this).data('booking-date'));
                const deadline = new Date(bookingDate);
                deadline.setHours(deadline.getHours() + 24);

                function updateCountdown() {
                    const now = new Date();
                    const diff = deadline - now;

                    if (diff <= 0) {
                        $(`#countdown-${bookingId}`).text('Overdue').addClass('text-danger');
                        return;
                    }

                    const hours = Math.floor(diff / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
                    $(`#countdown-${bookingId}`).text(`${hours}h ${minutes}m ${seconds}s`);
                }

                updateCountdown();
                setInterval(updateCountdown, 1000);
            });

            // Handle assign guide button click
            $('.assign-guide-btn').on('click', function () {
                const bookingId = $(this).data('booking-id');
                const tourGroupId = $(this).data('tour-group-id');
                const tourId = $(this).data('tour-id');
                const bookingCard = $(`#booking-${bookingId}`);

                // Extract booking details
                const tourName = bookingCard.find('.tour-name').contents().filter(function () {
                    return this.nodeType === 3; // Text nodes only
                }).text().trim();
                const departure = bookingCard.find('.fa-calendar-day').parent().text().replace('Departure:', '').trim();
                const groupSize = bookingCard.find('.fa-users').parent().text().trim();
                const pickupPoint = bookingCard.find('.fa-map-marker-alt').parent().text().replace('Pickup:', '').trim();
                const totalPrice = bookingCard.find('.fa-money-bill-wave').parent().text().replace('Total:', '').trim();

                // Set booking ID
                $('#bookingId').val(bookingId);

                // Populate booking details
                $('#bookingDetails').html(`
                    <p><strong>TOUR:</strong> ${tourName || 'N/A'}</p>
                    <p><strong>DEPARTURE:</strong> ${departure || 'N/A'}</p>
                    <p><strong>GROUP SIZE:</strong> ${groupSize || 'N/A'}</p>
                    <p><strong>PICKUP POINT:</strong> ${pickupPoint || 'N/A'}</p>
                    <p><strong>TOTAL PRICE:</strong> ${totalPrice || 'N/A'}</p>
                `);

                // Set group size badge
                $('#groupSizeBadge').text(groupSize || 'N/A').removeClass('bg-secondary').addClass('bg-info');

                // Reset other badges
                $('#tourDifficultyBadge').text('Loading...').removeClass().addClass('badge difficulty-badge bg-secondary');
                $('#requiredExpBadge').text('Loading...').removeClass().addClass('badge bg-secondary');

                // Show modal
                $('#assignGuideModal').modal('show');

                // Load recommended guides
                loadRecommendedGuides(tourGroupId);
            });

            // Load recommended guides
            function loadRecommendedGuides(tourGroupId) {
                console.log(`Loading guides for tourGroupId: ${tourGroupId}`);
                $('#recommendedGuides').html(`
                    <div class="col-12 text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading recommended guides...</p>
                    </div>
                `);

                $.ajax({
                    url: `/TourManager/GetRecommendedGuides/${tourGroupId}`,
                    type: 'GET',
                    success: function (data) {
                        console.log('Recommended guides response:', data);
                        if (data && Array.isArray(data) && data.length > 0) {
                            let html = '';
                            data.forEach((guide, index) => {
                                // Update badges for the first guide
                                if (index === 0) {
                                    $('#tourDifficultyBadge')
                                        .text(guide.tourDifficulty ? `Level ${guide.tourDifficulty}` : 'Unknown')
                                        .removeClass()
                                        .addClass(`badge difficulty-badge ${guide.tourDifficulty ? 'difficulty-' + guide.tourDifficulty : 'bg-secondary'}`);
                                    $('#requiredExpBadge')
                                        .text(guide.requiredExperience ? `${guide.requiredExperience} years` : 'Unknown')
                                        .removeClass()
                                        .addClass(`badge ${guide.requiredExperience ? 'bg-primary' : 'bg-secondary'}`);
                                }

                                html += `
                                    <div class="col-md-6 mb-3">
                                        <div class="card guide-card" data-guide-id="${guide.id}" onclick="selectGuide(this)">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h5 class="card-title mb-1 text-uppercase">${guide.name || 'Unknown'}</h5>
                                                        <div class="mb-2">
                                                            ${renderStars(guide.rating || 0)}
                                                            <span class="small ms-1">${(guide.rating || 0).toFixed(1)}</span>
                                                        </div>
                                                        <p class="small mb-1 text-uppercase"><i class="fas fa-language me-1"></i> ${guide.languages || 'N/A'}</p>
                                                        <p class="small mb-1 text-uppercase"><i class="fas fa-briefcase me-1"></i> ${guide.experience || 0} years</p>
                                                        <p class="small mb-1 text-uppercase"><i class="fas fa-users me-1"></i> Max: ${guide.maxCapacity || 0}</p>
                                                    </div>
                                                    <div class="text-end">
                                                        <span class="badge bg-success">Suitability: ${(guide.suitabilityScore || 0).toFixed(0)}%</span>
                                                        ${index < 3 ? '<span class="badge bg-warning text-dark ms-1">Top Pick</span>' : ''}
                                                    </div>
                                                </div>
                                                <div class="mt-2">
                                                    ${renderSpecializations(guide.specializations)}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            });
                            $('#recommendedGuides').html(html);
                        } else {
                            $('#recommendedGuides').html('<div class="col-12 text-center py-3"><p>No recommended guides available.</p></div>');
                            $('#tourDifficultyBadge').text('Unknown').removeClass().addClass('badge difficulty-badge bg-secondary');
                            $('#requiredExpBadge').text('Unknown').removeClass().addClass('badge bg-secondary');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error(`Failed to load guides: ${textStatus} - ${errorThrown}`);
                        console.log('Error response:', jqXHR.responseText);
                        $('#recommendedGuides').html('<div class="col-12 text-center py-3"><p class="text-danger">Error loading guides. Please try again.</p></div>');
                        $('#tourDifficultyBadge').text('Unknown').removeClass().addClass('badge difficulty-badge bg-secondary');
                        $('#requiredExpBadge').text('Unknown').removeClass().addClass('badge bg-secondary');
                        showToast('Failed to load recommended guides.', 'error');
                    }
                });
            }

            // Render star ratings
            function renderStars(rating) {
                let stars = '';
                const fullStars = Math.floor(rating);
                const hasHalfStar = rating % 1 >= 0.5;
                for (let i = 1; i <= 5; i++) {
                    if (i <= fullStars) {
                        stars += '<i class="fas fa-star guide-rating"></i>';
                    } else if (i === fullStars + 1 && hasHalfStar) {
                        stars += '<i class="fas fa-star-half-alt guide-rating"></i>';
                    } else {
                        stars += '<i class="far fa-star guide-rating"></i>';
                    }
                }
                return stars;
            }

            // Render specializations
            function renderSpecializations(specializations) {
                if (!specializations) return '';
                const specs = specializations.split(';').filter(spec => spec.trim());
                return specs.map(spec => `<span class="badge specialization-badge bg-info text-uppercase">${spec.trim()}</span>`).join('');
            }

            // Select guide
            window.selectGuide = function (element) {
                $('.guide-card').removeClass('selected');
                $(element).addClass('selected');
                $('#confirmAssignBtn').prop('disabled', false);
            };

            // Confirm assignment
            $('#confirmAssignBtn').on('click', function () {
                const bookingId = $('#bookingId').val();
                const selectedGuideId = $('.guide-card.selected').data('guide-id');

                if (!bookingId || !selectedGuideId) {
                    showToast('Please select a tour guide.', 'error');
                    return;
                }

                console.log('Assigning:', { bookingId, selectedGuideId });

                $.ajax({
                    url: '/TourManager/AssignGuide',
                    type: 'POST',
                    contentType: 'application/json',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    data: JSON.stringify({ bookingId: parseInt(bookingId), guideId: parseInt(selectedGuideId) }),
                    success: function (response) {
                        console.log('AssignGuide response:', response);
                        if (response.success) {
                            $('#assignGuideModal').modal('hide');
                            $(`#booking-${bookingId}`).fadeOut(300, function () {
                                $(this).remove();
                                if (!$('.booking-card').length) {
                                    $('.col-12').html(`
                                        <div class="text-center py-5 bg-light rounded">
                                            <i class="fas fa-calendar-check fa-3x text-muted mb-3"></i>
                                            <h3 class="h4 text-muted">No Unassigned Bookings</h3>
                                            <p class="text-muted">All bookings have been assigned to tour guides.</p>
                                            <button class="btn btn-primary" id="checkForNewBtn">
                                                <i class="fas fa-sync-alt me-2"></i> Check for New Bookings
                                            </button>
                                        </div>
                                    `);
                                }
                            });
                            showToast('Guide assigned successfully!', 'success');
                        } else {
                            showToast(response.message || 'Failed to assign guide.', 'error');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error(`Assign guide failed: ${textStatus} - ${errorThrown}`);
                        console.log('Error response:', jqXHR.responseText);
                        showToast('Error assigning guide. Please try again.', 'error');
                    }
                });
            });

            // Refresh button
            $('#refreshBtn, #checkForNewBtn').on('click', function () {
                location.reload();
            });

            // Show toast
            function showToast(message, type) {
                const toastClass = type === 'success' ? 'alert-success' : 'alert-danger';
                const toastHtml = `
                    <div class="alert ${toastClass} alert-dismissible fade show position-fixed bottom-0 end-0 m-3" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                $('body').append(toastHtml);
                setTimeout(() => $('.alert').alert('close'), 5000);
            }
        });
    </script>
</body>
</html>