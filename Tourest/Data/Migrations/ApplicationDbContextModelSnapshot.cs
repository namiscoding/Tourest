// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tourest.Data;

#nullable disable

namespace Tourest.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tourest.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ResetTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("DATE");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChildren")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<string>("PickupPoint")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("TourGroupID")
                        .HasColumnType("int");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("TourGroupID");

                    b.HasIndex("TourID");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.ItineraryDay", b =>
                {
                    b.Property<int>("ItineraryDayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryDayID"));

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("ItineraryDayID");

                    b.HasIndex("TourID");

                    b.ToTable("ItineraryDays", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RecipientUserID")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SenderUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NotificationID");

                    b.HasIndex("RecipientUserID");

                    b.HasIndex("SenderUserID");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionID")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("RatingType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("RatingValue")
                        .HasColumnType("decimal(3, 2)");

                    b.HasKey("RatingID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Ratings", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.SupportRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("HandlerUserID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResolutionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.HasKey("RequestID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("HandlerUserID");

                    b.ToTable("SupportRequests", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Tour", b =>
                {
                    b.Property<int>("TourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourID"));

                    b.Property<decimal>("AdultPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("CancellationPolicyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ChildPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DeparturePoints")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int>("DurationNights")
                        .HasColumnType("int");

                    b.Property<string>("ExcludedServices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncludedServices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancellable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("MaxGroupSize")
                        .HasColumnType("int");

                    b.Property<int?>("MinGroupSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TourID");

                    b.ToTable("Tours", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourAuditLog", b =>
                {
                    b.Property<long>("AuditLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditLogID"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("AuditLogID");

                    b.HasIndex("PerformedByUserID");

                    b.HasIndex("TourID");

                    b.ToTable("TourAuditLogs", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourCategory", b =>
                {
                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("TourID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("TourCategories", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourGroup", b =>
                {
                    b.Property<int>("TourGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGroupID"));

                    b.Property<int?>("AssignedTourGuideID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("DATE");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalGuests")
                        .HasColumnType("int");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("TourGroupID");

                    b.HasIndex("AssignedTourGuideID");

                    b.HasIndex("TourID");

                    b.ToTable("TourGroups", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourGuide", b =>
                {
                    b.Property<int>("TourGuideUserID")
                        .HasColumnType("int");

                    b.Property<decimal?>("AverageRating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("ExperienceLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguagesSpoken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("MaxGroupSizeCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Specializations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TourGuideUserID");

                    b.ToTable("TourGuides", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourGuideAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<DateTime>("AssignmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TourGroupID")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideID")
                        .HasColumnType("int");

                    b.Property<int>("TourManagerID")
                        .HasColumnType("int");

                    b.HasKey("AssignmentID");

                    b.HasIndex("TourGroupID");

                    b.HasIndex("TourGuideID");

                    b.HasIndex("TourManagerID");

                    b.ToTable("TourGuideAssignments", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourGuideRating", b =>
                {
                    b.Property<int>("RatingID")
                        .HasColumnType("int");

                    b.Property<int>("TourGroupID")
                        .HasColumnType("int");

                    b.Property<int>("TourGuideID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("TourGroupID");

                    b.HasIndex("TourGuideID");

                    b.ToTable("TourGuideRatings", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.TourRating", b =>
                {
                    b.Property<int>("RatingID")
                        .HasColumnType("int");

                    b.Property<int>("TourID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("TourID");

                    b.ToTable("TourRatings", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Tourest.Models.Account", b =>
                {
                    b.HasOne("Tourest.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Tourest.Models.Account", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourest.Models.Booking", b =>
                {
                    b.HasOne("Tourest.Models.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tourest.Models.TourGroup", "TourGroup")
                        .WithMany("Bookings")
                        .HasForeignKey("TourGroupID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tourest.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tour");

                    b.Navigation("TourGroup");
                });

            modelBuilder.Entity("Tourest.Models.ItineraryDay", b =>
                {
                    b.HasOne("Tourest.Models.Tour", "Tour")
                        .WithMany("ItineraryDays")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourest.Models.Notification", b =>
                {
                    b.HasOne("Tourest.Models.User", "RecipientUser")
                        .WithMany("NotificationsReceived")
                        .HasForeignKey("RecipientUserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tourest.Models.User", "SenderUser")
                        .WithMany("NotificationsSent")
                        .HasForeignKey("SenderUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("RecipientUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Tourest.Models.Payment", b =>
                {
                    b.HasOne("Tourest.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Tourest.Models.Payment", "BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Tourest.Models.Rating", b =>
                {
                    b.HasOne("Tourest.Models.User", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Tourest.Models.SupportRequest", b =>
                {
                    b.HasOne("Tourest.Models.User", "Customer")
                        .WithMany("SubmittedSupportRequests")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tourest.Models.User", "HandlerUser")
                        .WithMany("HandledSupportRequests")
                        .HasForeignKey("HandlerUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("HandlerUser");
                });

            modelBuilder.Entity("Tourest.Models.TourAuditLog", b =>
                {
                    b.HasOne("Tourest.Models.User", "PerformedBy")
                        .WithMany("TourAuditLogsPerformed")
                        .HasForeignKey("PerformedByUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tourest.Models.Tour", "Tour")
                        .WithMany("AuditLogs")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedBy");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourest.Models.TourCategory", b =>
                {
                    b.HasOne("Tourest.Models.Category", "Category")
                        .WithMany("TourCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourest.Models.Tour", "Tour")
                        .WithMany("TourCategories")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourest.Models.TourGroup", b =>
                {
                    b.HasOne("Tourest.Models.User", "AssignedTourGuide")
                        .WithMany()
                        .HasForeignKey("AssignedTourGuideID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tourest.Models.Tour", "Tour")
                        .WithMany("TourGroups")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTourGuide");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourest.Models.TourGuide", b =>
                {
                    b.HasOne("Tourest.Models.User", "User")
                        .WithOne("TourGuide")
                        .HasForeignKey("Tourest.Models.TourGuide", "TourGuideUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tourest.Models.TourGuideAssignment", b =>
                {
                    b.HasOne("Tourest.Models.TourGroup", "TourGroup")
                        .WithMany("TourGuideAssignments")
                        .HasForeignKey("TourGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourest.Models.User", "TourGuide")
                        .WithMany("TourGuideAssignments")
                        .HasForeignKey("TourGuideID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Tourest.Models.User", "TourManager")
                        .WithMany("TourManagerAssignments")
                        .HasForeignKey("TourManagerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourGroup");

                    b.Navigation("TourGuide");

                    b.Navigation("TourManager");
                });

            modelBuilder.Entity("Tourest.Models.TourGuideRating", b =>
                {
                    b.HasOne("Tourest.Models.Rating", "Rating")
                        .WithOne("TourGuideRating")
                        .HasForeignKey("Tourest.Models.TourGuideRating", "RatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourest.Models.TourGroup", "TourGroup")
                        .WithMany("TourGuideRatings")
                        .HasForeignKey("TourGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourest.Models.User", "TourGuide")
                        .WithMany("TourGuideRatingsReceived")
                        .HasForeignKey("TourGuideID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("TourGroup");

                    b.Navigation("TourGuide");
                });

            modelBuilder.Entity("Tourest.Models.TourRating", b =>
                {
                    b.HasOne("Tourest.Models.Rating", "Rating")
                        .WithOne("TourRating")
                        .HasForeignKey("Tourest.Models.TourRating", "RatingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tourest.Models.Tour", "Tour")
                        .WithMany("TourRatings")
                        .HasForeignKey("TourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rating");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tourest.Models.Booking", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Tourest.Models.Category", b =>
                {
                    b.Navigation("TourCategories");
                });

            modelBuilder.Entity("Tourest.Models.Rating", b =>
                {
                    b.Navigation("TourGuideRating");

                    b.Navigation("TourRating");
                });

            modelBuilder.Entity("Tourest.Models.Tour", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Bookings");

                    b.Navigation("ItineraryDays");

                    b.Navigation("TourCategories");

                    b.Navigation("TourGroups");

                    b.Navigation("TourRatings");
                });

            modelBuilder.Entity("Tourest.Models.TourGroup", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TourGuideAssignments");

                    b.Navigation("TourGuideRatings");
                });

            modelBuilder.Entity("Tourest.Models.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Bookings");

                    b.Navigation("HandledSupportRequests");

                    b.Navigation("NotificationsReceived");

                    b.Navigation("NotificationsSent");

                    b.Navigation("Ratings");

                    b.Navigation("SubmittedSupportRequests");

                    b.Navigation("TourAuditLogsPerformed");

                    b.Navigation("TourGuide");

                    b.Navigation("TourGuideAssignments");

                    b.Navigation("TourGuideRatingsReceived");

                    b.Navigation("TourManagerAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
